
Remake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bf8  08000c00  00010c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000bf8  08000bf8  00010bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000bfc  08000bfc  00010bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010c00  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00010c00  2**0
                  CONTENTS, READONLY
 10 .debug_info   00003cef  00000000  00000000  00010c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000872  00000000  00000000  00014919  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005e8  00000000  00000000  00015190  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000580  00000000  00000000  00015778  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001b03  00000000  00000000  00015cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000018c9  00000000  00000000  000177fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000190c4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000019b8  00000000  00000000  00019140  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000be0 	.word	0x08000be0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000be0 	.word	0x08000be0

080001c8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	617b      	str	r3, [r7, #20]
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
 80001e2:	e076      	b.n	80002d2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001e4:	2201      	movs	r2, #1
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	fa02 f303 	lsl.w	r3, r2, r3
 80001ec:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	693b      	ldr	r3, [r7, #16]
 80001f4:	4013      	ands	r3, r2
 80001f6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d165      	bne.n	80002cc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	2103      	movs	r1, #3
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	43db      	mvns	r3, r3
 8000210:	401a      	ands	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	4619      	mov	r1, r3
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
 8000228:	431a      	orrs	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d003      	beq.n	800023e <GPIO_Init+0x76>
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	791b      	ldrb	r3, [r3, #4]
 800023a:	2b02      	cmp	r3, #2
 800023c:	d12e      	bne.n	800029c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	689a      	ldr	r2, [r3, #8]
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	2103      	movs	r1, #3
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	43db      	mvns	r3, r3
 800024e:	401a      	ands	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	689a      	ldr	r2, [r3, #8]
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	795b      	ldrb	r3, [r3, #5]
 800025c:	4619      	mov	r1, r3
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	685a      	ldr	r2, [r3, #4]
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	b29b      	uxth	r3, r3
 8000274:	4619      	mov	r1, r3
 8000276:	2301      	movs	r3, #1
 8000278:	408b      	lsls	r3, r1
 800027a:	43db      	mvns	r3, r3
 800027c:	401a      	ands	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	7992      	ldrb	r2, [r2, #6]
 800028a:	4611      	mov	r1, r2
 800028c:	697a      	ldr	r2, [r7, #20]
 800028e:	b292      	uxth	r2, r2
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	b292      	uxth	r2, r2
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	2103      	movs	r1, #3
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	401a      	ands	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	79db      	ldrb	r3, [r3, #7]
 80002bc:	4619      	mov	r1, r3
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	431a      	orrs	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	3301      	adds	r3, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	2b0f      	cmp	r3, #15
 80002d6:	d985      	bls.n	80001e4 <GPIO_Init+0x1c>
    }
  }
}
 80002d8:	bf00      	nop
 80002da:	371c      	adds	r7, #28
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr

080002e2 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80002e2:	b480      	push	{r7}
 80002e4:	b085      	sub	sp, #20
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
 80002ea:	460b      	mov	r3, r1
 80002ec:	807b      	strh	r3, [r7, #2]
 80002ee:	4613      	mov	r3, r2
 80002f0:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80002fa:	787a      	ldrb	r2, [r7, #1]
 80002fc:	887b      	ldrh	r3, [r7, #2]
 80002fe:	f003 0307 	and.w	r3, r3, #7
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	fa02 f303 	lsl.w	r3, r2, r3
 8000308:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800030a:	887b      	ldrh	r3, [r7, #2]
 800030c:	08db      	lsrs	r3, r3, #3
 800030e:	b29b      	uxth	r3, r3
 8000310:	4618      	mov	r0, r3
 8000312:	887b      	ldrh	r3, [r7, #2]
 8000314:	08db      	lsrs	r3, r3, #3
 8000316:	b29b      	uxth	r3, r3
 8000318:	461a      	mov	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	3208      	adds	r2, #8
 800031e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000322:	887b      	ldrh	r3, [r7, #2]
 8000324:	f003 0307 	and.w	r3, r3, #7
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	210f      	movs	r1, #15
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	ea02 0103 	and.w	r1, r2, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	f100 0208 	add.w	r2, r0, #8
 800033c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000340:	887b      	ldrh	r3, [r7, #2]
 8000342:	08db      	lsrs	r3, r3, #3
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3208      	adds	r2, #8
 800034c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	4313      	orrs	r3, r2
 8000354:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000356:	887b      	ldrh	r3, [r7, #2]
 8000358:	08db      	lsrs	r3, r3, #3
 800035a:	b29b      	uxth	r3, r3
 800035c:	461a      	mov	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	3208      	adds	r2, #8
 8000362:	68b9      	ldr	r1, [r7, #8]
 8000364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000368:	bf00      	nop
 800036a:	3714      	adds	r7, #20
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
	...

08000374 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d006      	beq.n	8000394 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000386:	4909      	ldr	r1, [pc, #36]	; (80003ac <RCC_AHB1PeriphClockCmd+0x38>)
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <RCC_AHB1PeriphClockCmd+0x38>)
 800038a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4313      	orrs	r3, r2
 8000390:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000392:	e006      	b.n	80003a2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000394:	4905      	ldr	r1, [pc, #20]	; (80003ac <RCC_AHB1PeriphClockCmd+0x38>)
 8000396:	4b05      	ldr	r3, [pc, #20]	; (80003ac <RCC_AHB1PeriphClockCmd+0x38>)
 8000398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	43db      	mvns	r3, r3
 800039e:	4013      	ands	r3, r2
 80003a0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40023800 	.word	0x40023800

080003b0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d006      	beq.n	80003d0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80003c2:	4909      	ldr	r1, [pc, #36]	; (80003e8 <RCC_APB1PeriphClockCmd+0x38>)
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <RCC_APB1PeriphClockCmd+0x38>)
 80003c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4313      	orrs	r3, r2
 80003cc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80003ce:	e006      	b.n	80003de <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80003d0:	4905      	ldr	r1, [pc, #20]	; (80003e8 <RCC_APB1PeriphClockCmd+0x38>)
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <RCC_APB1PeriphClockCmd+0x38>)
 80003d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	43db      	mvns	r3, r3
 80003da:	4013      	ands	r3, r2
 80003dc:	640b      	str	r3, [r1, #64]	; 0x40
}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40023800 	.word	0x40023800

080003ec <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a28      	ldr	r2, [pc, #160]	; (80004a4 <TIM_TimeBaseInit+0xb8>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d013      	beq.n	8000430 <TIM_TimeBaseInit+0x44>
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a27      	ldr	r2, [pc, #156]	; (80004a8 <TIM_TimeBaseInit+0xbc>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d00f      	beq.n	8000430 <TIM_TimeBaseInit+0x44>
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000416:	d00b      	beq.n	8000430 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a24      	ldr	r2, [pc, #144]	; (80004ac <TIM_TimeBaseInit+0xc0>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d007      	beq.n	8000430 <TIM_TimeBaseInit+0x44>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a23      	ldr	r2, [pc, #140]	; (80004b0 <TIM_TimeBaseInit+0xc4>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d003      	beq.n	8000430 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a22      	ldr	r2, [pc, #136]	; (80004b4 <TIM_TimeBaseInit+0xc8>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d108      	bne.n	8000442 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000430:	89fb      	ldrh	r3, [r7, #14]
 8000432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000436:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	885a      	ldrh	r2, [r3, #2]
 800043c:	89fb      	ldrh	r3, [r7, #14]
 800043e:	4313      	orrs	r3, r2
 8000440:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <TIM_TimeBaseInit+0xcc>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d00c      	beq.n	8000464 <TIM_TimeBaseInit+0x78>
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <TIM_TimeBaseInit+0xd0>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d008      	beq.n	8000464 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000452:	89fb      	ldrh	r3, [r7, #14]
 8000454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000458:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	891a      	ldrh	r2, [r3, #8]
 800045e:	89fb      	ldrh	r3, [r7, #14]
 8000460:	4313      	orrs	r3, r2
 8000462:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	89fa      	ldrh	r2, [r7, #14]
 8000468:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	685a      	ldr	r2, [r3, #4]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	881a      	ldrh	r2, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a09      	ldr	r2, [pc, #36]	; (80004a4 <TIM_TimeBaseInit+0xb8>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d003      	beq.n	800048a <TIM_TimeBaseInit+0x9e>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a08      	ldr	r2, [pc, #32]	; (80004a8 <TIM_TimeBaseInit+0xbc>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d104      	bne.n	8000494 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	7a9b      	ldrb	r3, [r3, #10]
 800048e:	b29a      	uxth	r2, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2201      	movs	r2, #1
 8000498:	829a      	strh	r2, [r3, #20]
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40010000 	.word	0x40010000
 80004a8:	40010400 	.word	0x40010400
 80004ac:	40000400 	.word	0x40000400
 80004b0:	40000800 	.word	0x40000800
 80004b4:	40000c00 	.word	0x40000c00
 80004b8:	40001000 	.word	0x40001000
 80004bc:	40001400 	.word	0x40001400

080004c0 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f04f 32ff 	mov.w	r2, #4294967295
 80004ce:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2200      	movs	r2, #0
 80004d4:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2200      	movs	r2, #0
 80004da:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2200      	movs	r2, #0
 80004e0:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2200      	movs	r2, #0
 80004e6:	729a      	strb	r2, [r3, #10]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr

080004f2 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b083      	sub	sp, #12
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
 80004fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	683a      	ldr	r2, [r7, #0]
 8000500:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000518:	78fb      	ldrb	r3, [r7, #3]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d008      	beq.n	8000530 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	b29b      	uxth	r3, r3
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	b29a      	uxth	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800052e:	e007      	b.n	8000540 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	b29b      	uxth	r3, r3
 8000536:	f023 0301 	bic.w	r3, r3, #1
 800053a:	b29a      	uxth	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	801a      	strh	r2, [r3, #0]
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
	...

0800054c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	817b      	strh	r3, [r7, #10]
 800055a:	2300      	movs	r3, #0
 800055c:	81fb      	strh	r3, [r7, #14]
 800055e:	2300      	movs	r3, #0
 8000560:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	8c1b      	ldrh	r3, [r3, #32]
 8000566:	b29b      	uxth	r3, r3
 8000568:	f023 0310 	bic.w	r3, r3, #16
 800056c:	b29a      	uxth	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	8c1b      	ldrh	r3, [r3, #32]
 8000576:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	889b      	ldrh	r3, [r3, #4]
 800057c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	8b1b      	ldrh	r3, [r3, #24]
 8000582:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8000584:	897b      	ldrh	r3, [r7, #10]
 8000586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800058a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800058c:	897b      	ldrh	r3, [r7, #10]
 800058e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000592:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	b29a      	uxth	r2, r3
 800059c:	897b      	ldrh	r3, [r7, #10]
 800059e:	4313      	orrs	r3, r2
 80005a0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80005a2:	89fb      	ldrh	r3, [r7, #14]
 80005a4:	f023 0320 	bic.w	r3, r3, #32
 80005a8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	899b      	ldrh	r3, [r3, #12]
 80005ae:	011b      	lsls	r3, r3, #4
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	89fb      	ldrh	r3, [r7, #14]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	885b      	ldrh	r3, [r3, #2]
 80005bc:	011b      	lsls	r3, r3, #4
 80005be:	b29a      	uxth	r2, r3
 80005c0:	89fb      	ldrh	r3, [r7, #14]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a22      	ldr	r2, [pc, #136]	; (8000654 <TIM_OC2Init+0x108>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d003      	beq.n	80005d6 <TIM_OC2Init+0x8a>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <TIM_OC2Init+0x10c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d12b      	bne.n	800062e <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80005d6:	89fb      	ldrh	r3, [r7, #14]
 80005d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005dc:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	89db      	ldrh	r3, [r3, #14]
 80005e2:	011b      	lsls	r3, r3, #4
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	89fb      	ldrh	r3, [r7, #14]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005f2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	889b      	ldrh	r3, [r3, #4]
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	89fb      	ldrh	r3, [r7, #14]
 80005fe:	4313      	orrs	r3, r2
 8000600:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8000602:	89bb      	ldrh	r3, [r7, #12]
 8000604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000608:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800060a:	89bb      	ldrh	r3, [r7, #12]
 800060c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000610:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	8a1b      	ldrh	r3, [r3, #16]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	b29a      	uxth	r2, r3
 800061a:	89bb      	ldrh	r3, [r7, #12]
 800061c:	4313      	orrs	r3, r2
 800061e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	8a5b      	ldrh	r3, [r3, #18]
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	b29a      	uxth	r2, r3
 8000628:	89bb      	ldrh	r3, [r7, #12]
 800062a:	4313      	orrs	r3, r2
 800062c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	89ba      	ldrh	r2, [r7, #12]
 8000632:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	897a      	ldrh	r2, [r7, #10]
 8000638:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	689a      	ldr	r2, [r3, #8]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	89fa      	ldrh	r2, [r7, #14]
 8000646:	841a      	strh	r2, [r3, #32]
}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40010000 	.word	0x40010000
 8000658:	40010400 	.word	0x40010400

0800065c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	817b      	strh	r3, [r7, #10]
 800066a:	2300      	movs	r3, #0
 800066c:	81fb      	strh	r3, [r7, #14]
 800066e:	2300      	movs	r3, #0
 8000670:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	8c1b      	ldrh	r3, [r3, #32]
 8000676:	b29b      	uxth	r3, r3
 8000678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800067c:	b29a      	uxth	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	8c1b      	ldrh	r3, [r3, #32]
 8000686:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	889b      	ldrh	r3, [r3, #4]
 800068c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	8b9b      	ldrh	r3, [r3, #28]
 8000692:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8000694:	897b      	ldrh	r3, [r7, #10]
 8000696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800069a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800069c:	897b      	ldrh	r3, [r7, #10]
 800069e:	f023 0303 	bic.w	r3, r3, #3
 80006a2:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	881a      	ldrh	r2, [r3, #0]
 80006a8:	897b      	ldrh	r3, [r7, #10]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80006ae:	89fb      	ldrh	r3, [r7, #14]
 80006b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006b4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	899b      	ldrh	r3, [r3, #12]
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	b29a      	uxth	r2, r3
 80006be:	89fb      	ldrh	r3, [r7, #14]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	885b      	ldrh	r3, [r3, #2]
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	89fb      	ldrh	r3, [r7, #14]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a22      	ldr	r2, [pc, #136]	; (8000760 <TIM_OC3Init+0x104>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d003      	beq.n	80006e2 <TIM_OC3Init+0x86>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <TIM_OC3Init+0x108>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d12b      	bne.n	800073a <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80006e2:	89fb      	ldrh	r3, [r7, #14]
 80006e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006e8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	89db      	ldrh	r3, [r3, #14]
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	89fb      	ldrh	r3, [r7, #14]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80006f8:	89fb      	ldrh	r3, [r7, #14]
 80006fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006fe:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	021b      	lsls	r3, r3, #8
 8000706:	b29a      	uxth	r2, r3
 8000708:	89fb      	ldrh	r3, [r7, #14]
 800070a:	4313      	orrs	r3, r2
 800070c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800070e:	89bb      	ldrh	r3, [r7, #12]
 8000710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000714:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8000716:	89bb      	ldrh	r3, [r7, #12]
 8000718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800071c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	8a1b      	ldrh	r3, [r3, #16]
 8000722:	011b      	lsls	r3, r3, #4
 8000724:	b29a      	uxth	r2, r3
 8000726:	89bb      	ldrh	r3, [r7, #12]
 8000728:	4313      	orrs	r3, r2
 800072a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	8a5b      	ldrh	r3, [r3, #18]
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	b29a      	uxth	r2, r3
 8000734:	89bb      	ldrh	r3, [r7, #12]
 8000736:	4313      	orrs	r3, r2
 8000738:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	89ba      	ldrh	r2, [r7, #12]
 800073e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	897a      	ldrh	r2, [r7, #10]
 8000744:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	689a      	ldr	r2, [r3, #8]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	89fa      	ldrh	r2, [r7, #14]
 8000752:	841a      	strh	r2, [r3, #32]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40010000 	.word	0x40010000
 8000764:	40010400 	.word	0x40010400

08000768 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2200      	movs	r2, #0
 800078c:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2200      	movs	r2, #0
 800079e:	825a      	strh	r2, [r3, #18]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b085      	sub	sp, #20
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	460b      	mov	r3, r1
 80007b4:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	891b      	ldrh	r3, [r3, #8]
 80007be:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80007c0:	89fb      	ldrh	r3, [r7, #14]
 80007c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007c6:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80007c8:	89fa      	ldrh	r2, [r7, #14]
 80007ca:	887b      	ldrh	r3, [r7, #2]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	89fa      	ldrh	r2, [r7, #14]
 80007d4:	811a      	strh	r2, [r3, #8]
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	889b      	ldrh	r3, [r3, #4]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	889b      	ldrh	r3, [r3, #4]
 8000800:	b29a      	uxth	r2, r3
 8000802:	887b      	ldrh	r3, [r7, #2]
 8000804:	4313      	orrs	r3, r2
 8000806:	b29a      	uxth	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	809a      	strh	r2, [r3, #4]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
 800081e:	460b      	mov	r3, r1
 8000820:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	891b      	ldrh	r3, [r3, #8]
 8000826:	b29b      	uxth	r3, r3
 8000828:	f023 0307 	bic.w	r3, r3, #7
 800082c:	b29a      	uxth	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	891b      	ldrh	r3, [r3, #8]
 8000836:	b29a      	uxth	r2, r3
 8000838:	887b      	ldrh	r3, [r7, #2]
 800083a:	4313      	orrs	r3, r2
 800083c:	b29a      	uxth	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	811a      	strh	r2, [r3, #8]
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	891b      	ldrh	r3, [r3, #8]
 800085c:	b29b      	uxth	r3, r3
 800085e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000862:	b29a      	uxth	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	891b      	ldrh	r3, [r3, #8]
 800086c:	b29a      	uxth	r2, r3
 800086e:	887b      	ldrh	r3, [r7, #2]
 8000870:	4313      	orrs	r3, r2
 8000872:	b29a      	uxth	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	811a      	strh	r2, [r3, #8]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <main>:

void GPIOD_Config(void);
void initPWM(void);

int main()
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
    initPWM();
 8000886:	f000 f801 	bl	800088c <initPWM>
    while(1)
 800088a:	e7fe      	b.n	800088a <main+0x8>

0800088c <initPWM>:
    {
    }
}

void initPWM()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
     TIM_TimeBaseInitTypeDef timer;
     TIM_OCInitTypeDef timerPWM;

     RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000892:	2101      	movs	r1, #1
 8000894:	2004      	movs	r0, #4
 8000896:	f7ff fd8b 	bl	80003b0 <RCC_APB1PeriphClockCmd>
     RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800089a:	2101      	movs	r1, #1
 800089c:	2002      	movs	r0, #2
 800089e:	f7ff fd87 	bl	80003b0 <RCC_APB1PeriphClockCmd>

     GPIOD_Config();
 80008a2:	f000 f861 	bl	8000968 <GPIOD_Config>

     //activate alter function PD13
     //NO ALTERNATE FUNCTION FOR PD13 WITH TIM3 (TIM4_CH2 ONLY)
     GPIO_PinAFConfig(GPIOD,GPIO_PinSource13,GPIO_AF_TIM3);
 80008a6:	2202      	movs	r2, #2
 80008a8:	210d      	movs	r1, #13
 80008aa:	482c      	ldr	r0, [pc, #176]	; (800095c <initPWM+0xd0>)
 80008ac:	f7ff fd19 	bl	80002e2 <GPIO_PinAFConfig>
     //activate alter function PD14
     GPIO_PinAFConfig(GPIOD,GPIO_PinSource14,GPIO_AF_TIM4);
 80008b0:	2202      	movs	r2, #2
 80008b2:	210e      	movs	r1, #14
 80008b4:	4829      	ldr	r0, [pc, #164]	; (800095c <initPWM+0xd0>)
 80008b6:	f7ff fd14 	bl	80002e2 <GPIO_PinAFConfig>

     //Timer settings
     TIM_TimeBaseStructInit(&timer);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fdfe 	bl	80004c0 <TIM_TimeBaseStructInit>
     timer.TIM_ClockDivision = TIM_CKD_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	83bb      	strh	r3, [r7, #28]
     timer.TIM_CounterMode = TIM_CounterMode_Up;
 80008c8:	2300      	movs	r3, #0
 80008ca:	82fb      	strh	r3, [r7, #22]

     timer.TIM_Prescaler = prescaler;
 80008cc:	2300      	movs	r3, #0
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	82bb      	strh	r3, [r7, #20]
     timer.TIM_Period = Period;
 80008d2:	2313      	movs	r3, #19
 80008d4:	61bb      	str	r3, [r7, #24]

     TIM_TimeBaseInit(TIM4, &timer);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4820      	ldr	r0, [pc, #128]	; (8000960 <initPWM+0xd4>)
 80008de:	f7ff fd85 	bl	80003ec <TIM_TimeBaseInit>
     TIM_TimeBaseInit(TIM3, &timer);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	481e      	ldr	r0, [pc, #120]	; (8000964 <initPWM+0xd8>)
 80008ea:	f7ff fd7f 	bl	80003ec <TIM_TimeBaseInit>
     TIM_OCStructInit(&timerPWM);
 80008ee:	463b      	mov	r3, r7
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff39 	bl	8000768 <TIM_OCStructInit>

     timerPWM.TIM_Pulse = pulse;
 80008f6:	230f      	movs	r3, #15
 80008f8:	60bb      	str	r3, [r7, #8]
     timerPWM.TIM_OCMode = TIM_OCMode_PWM1;
 80008fa:	2360      	movs	r3, #96	; 0x60
 80008fc:	803b      	strh	r3, [r7, #0]
     timerPWM.TIM_OutputState = TIM_OutputState_Enable;
 80008fe:	2301      	movs	r3, #1
 8000900:	807b      	strh	r3, [r7, #2]
     timerPWM.TIM_OCPolarity = TIM_OCPolarity_High;
 8000902:	2300      	movs	r3, #0
 8000904:	81bb      	strh	r3, [r7, #12]

     TIM_OC2Init(TIM3, &timerPWM);
 8000906:	463b      	mov	r3, r7
 8000908:	4619      	mov	r1, r3
 800090a:	4816      	ldr	r0, [pc, #88]	; (8000964 <initPWM+0xd8>)
 800090c:	f7ff fe1e 	bl	800054c <TIM_OC2Init>
     //TIM_OC4Init(TIM4, &timerPWM); ?? TIM4_CH3 for PD14
     TIM_OC3Init(TIM4, &timerPWM);
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4812      	ldr	r0, [pc, #72]	; (8000960 <initPWM+0xd4>)
 8000916:	f7ff fea1 	bl	800065c <TIM_OC3Init>

     //Synch settings
     TIM_SelectOutputTrigger(TIM4, TIM_TRGOSource_Enable);//Master config
 800091a:	2110      	movs	r1, #16
 800091c:	4810      	ldr	r0, [pc, #64]	; (8000960 <initPWM+0xd4>)
 800091e:	f7ff ff5f 	bl	80007e0 <TIM_SelectOutputTrigger>
     TIM_SelectMasterSlaveMode(TIM4, TIM_MasterSlaveMode_Enable);
 8000922:	2180      	movs	r1, #128	; 0x80
 8000924:	480e      	ldr	r0, [pc, #56]	; (8000960 <initPWM+0xd4>)
 8000926:	f7ff ff91 	bl	800084c <TIM_SelectMasterSlaveMode>
     TIM_SelectInputTrigger(TIM3, TIM_TS_ITR3);//Slave config
 800092a:	2130      	movs	r1, #48	; 0x30
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <initPWM+0xd8>)
 800092e:	f7ff ff3c 	bl	80007aa <TIM_SelectInputTrigger>
     TIM_SelectSlaveMode(TIM3, TIM_SlaveMode_Gated);
 8000932:	2105      	movs	r1, #5
 8000934:	480b      	ldr	r0, [pc, #44]	; (8000964 <initPWM+0xd8>)
 8000936:	f7ff ff6e 	bl	8000816 <TIM_SelectSlaveMode>

     TIM_SetCounter(TIM3, 10);
 800093a:	210a      	movs	r1, #10
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <initPWM+0xd8>)
 800093e:	f7ff fdd8 	bl	80004f2 <TIM_SetCounter>

     TIM_Cmd(TIM3, ENABLE);
 8000942:	2101      	movs	r1, #1
 8000944:	4807      	ldr	r0, [pc, #28]	; (8000964 <initPWM+0xd8>)
 8000946:	f7ff fde1 	bl	800050c <TIM_Cmd>
     TIM_Cmd(TIM4, ENABLE);
 800094a:	2101      	movs	r1, #1
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <initPWM+0xd4>)
 800094e:	f7ff fddd 	bl	800050c <TIM_Cmd>
}
 8000952:	bf00      	nop
 8000954:	3720      	adds	r7, #32
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40020c00 	.word	0x40020c00
 8000960:	40000800 	.word	0x40000800
 8000964:	40000400 	.word	0x40000400

08000968 <GPIOD_Config>:

void GPIOD_Config(void) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioConf;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800096e:	2101      	movs	r1, #1
 8000970:	2008      	movs	r0, #8
 8000972:	f7ff fcff 	bl	8000374 <RCC_AHB1PeriphClockCmd>
	gpioConf.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 8000976:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800097a:	603b      	str	r3, [r7, #0]
	gpioConf.GPIO_Mode = GPIO_Mode_AF;
 800097c:	2302      	movs	r3, #2
 800097e:	713b      	strb	r3, [r7, #4]
	gpioConf.GPIO_Speed = GPIO_Speed_2MHz;
 8000980:	2300      	movs	r3, #0
 8000982:	717b      	strb	r3, [r7, #5]
	gpioConf.GPIO_OType = GPIO_OType_PP;
 8000984:	2300      	movs	r3, #0
 8000986:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(GPIOD, &gpioConf);
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	4803      	ldr	r0, [pc, #12]	; (800099c <GPIOD_Config+0x34>)
 800098e:	f7ff fc1b 	bl	80001c8 <GPIO_Init>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40020c00 	.word	0x40020c00

080009a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009a6:	e003      	b.n	80009b0 <LoopCopyDataInit>

080009a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009ae:	3104      	adds	r1, #4

080009b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009b8:	d3f6      	bcc.n	80009a8 <CopyDataInit>
  ldr  r2, =_sbss
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009bc:	e002      	b.n	80009c4 <LoopFillZerobss>

080009be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009c0:	f842 3b04 	str.w	r3, [r2], #4

080009c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009c8:	d3f9      	bcc.n	80009be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ca:	f000 f83d 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ce:	f000 f8e3 	bl	8000b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d2:	f7ff ff56 	bl	8000882 <main>
  bx  lr    
 80009d6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009dc:	08000c00 	.word	0x08000c00
  ldr  r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009e4:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80009e8:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80009ec:	2000001c 	.word	0x2000001c

080009f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC_IRQHandler>

080009f2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr

080009fe <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr

08000a22 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr

08000a3a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
	...

08000a48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a4c:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <SystemInit+0x50>)
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <SystemInit+0x50>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <SystemInit+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <SystemInit+0x50>)
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <SystemInit+0x50>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <SystemInit+0x50>)
 8000a70:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <SystemInit+0x54>)
 8000a72:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a74:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <SystemInit+0x50>)
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <SystemInit+0x50>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <SystemInit+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000a86:	f000 f80d 	bl	8000aa4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SystemInit+0x58>)
 8000a8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a90:	609a      	str	r2, [r3, #8]
#endif
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	24003010 	.word	0x24003010
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000ab2:	4a35      	ldr	r2, [pc, #212]	; (8000b88 <SetSysClock+0xe4>)
 8000ab4:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <SetSysClock+0xe4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000abc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000abe:	4b32      	ldr	r3, [pc, #200]	; (8000b88 <SetSysClock+0xe4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3301      	adds	r3, #1
 8000acc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d103      	bne.n	8000adc <SetSysClock+0x38>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000ada:	d1f0      	bne.n	8000abe <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <SetSysClock+0xe4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d002      	beq.n	8000aee <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	e001      	b.n	8000af2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d142      	bne.n	8000b7e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000af8:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <SetSysClock+0xe4>)
 8000afa:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <SetSysClock+0xe4>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000b04:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <SetSysClock+0xe8>)
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <SetSysClock+0xe8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b0e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000b10:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <SetSysClock+0xe4>)
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <SetSysClock+0xe4>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000b18:	4a1b      	ldr	r2, [pc, #108]	; (8000b88 <SetSysClock+0xe4>)
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <SetSysClock+0xe4>)
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b22:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000b24:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <SetSysClock+0xe4>)
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <SetSysClock+0xe4>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000b2e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <SetSysClock+0xe4>)
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <SetSysClock+0xec>)
 8000b34:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <SetSysClock+0xe4>)
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <SetSysClock+0xe4>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b40:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000b42:	bf00      	nop
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <SetSysClock+0xe4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d0f9      	beq.n	8000b44 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <SetSysClock+0xf0>)
 8000b52:	f240 7205 	movw	r2, #1797	; 0x705
 8000b56:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b58:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <SetSysClock+0xe4>)
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <SetSysClock+0xe4>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f023 0303 	bic.w	r3, r3, #3
 8000b62:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <SetSysClock+0xe4>)
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <SetSysClock+0xe4>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000b70:	bf00      	nop
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <SetSysClock+0xe4>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f003 030c 	and.w	r3, r3, #12
 8000b7a:	2b08      	cmp	r3, #8
 8000b7c:	d1f9      	bne.n	8000b72 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40007000 	.word	0x40007000
 8000b90:	07405419 	.word	0x07405419
 8000b94:	40023c00 	.word	0x40023c00

08000b98 <__libc_init_array>:
 8000b98:	b570      	push	{r4, r5, r6, lr}
 8000b9a:	4e0d      	ldr	r6, [pc, #52]	; (8000bd0 <__libc_init_array+0x38>)
 8000b9c:	4c0d      	ldr	r4, [pc, #52]	; (8000bd4 <__libc_init_array+0x3c>)
 8000b9e:	1ba4      	subs	r4, r4, r6
 8000ba0:	10a4      	asrs	r4, r4, #2
 8000ba2:	2500      	movs	r5, #0
 8000ba4:	42a5      	cmp	r5, r4
 8000ba6:	d109      	bne.n	8000bbc <__libc_init_array+0x24>
 8000ba8:	4e0b      	ldr	r6, [pc, #44]	; (8000bd8 <__libc_init_array+0x40>)
 8000baa:	4c0c      	ldr	r4, [pc, #48]	; (8000bdc <__libc_init_array+0x44>)
 8000bac:	f000 f818 	bl	8000be0 <_init>
 8000bb0:	1ba4      	subs	r4, r4, r6
 8000bb2:	10a4      	asrs	r4, r4, #2
 8000bb4:	2500      	movs	r5, #0
 8000bb6:	42a5      	cmp	r5, r4
 8000bb8:	d105      	bne.n	8000bc6 <__libc_init_array+0x2e>
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
 8000bbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bc0:	4798      	blx	r3
 8000bc2:	3501      	adds	r5, #1
 8000bc4:	e7ee      	b.n	8000ba4 <__libc_init_array+0xc>
 8000bc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bca:	4798      	blx	r3
 8000bcc:	3501      	adds	r5, #1
 8000bce:	e7f2      	b.n	8000bb6 <__libc_init_array+0x1e>
 8000bd0:	08000bf8 	.word	0x08000bf8
 8000bd4:	08000bf8 	.word	0x08000bf8
 8000bd8:	08000bf8 	.word	0x08000bf8
 8000bdc:	08000bfc 	.word	0x08000bfc

08000be0 <_init>:
 8000be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be2:	bf00      	nop
 8000be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000be6:	bc08      	pop	{r3}
 8000be8:	469e      	mov	lr, r3
 8000bea:	4770      	bx	lr

08000bec <_fini>:
 8000bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bee:	bf00      	nop
 8000bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf2:	bc08      	pop	{r3}
 8000bf4:	469e      	mov	lr, r3
 8000bf6:	4770      	bx	lr
