
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000af8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c80  08000c80  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000c80  08000c80  00010c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c84  08000c84  00010c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000020  20000020  00020004  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   000044bb  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000a27  00000000  00000000  000244e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000648  00000000  00000000  00024f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005d0  00000000  00000000  00025558  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001de1  00000000  00000000  00025b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001fe8  00000000  00000000  00027909  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000298f1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001b0c  00000000  00000000  00029970  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002b47c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000c68 	.word	0x08000c68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000c68 	.word	0x08000c68

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b087      	sub	sp, #28
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
 80002a6:	e076      	b.n	8000396 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002a8:	2201      	movs	r2, #1
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	fa02 f303 	lsl.w	r3, r2, r3
 80002b0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	4013      	ands	r3, r2
 80002ba:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d165      	bne.n	8000390 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	2103      	movs	r1, #3
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	43db      	mvns	r3, r3
 80002d4:	401a      	ands	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	791b      	ldrb	r3, [r3, #4]
 80002e2:	4619      	mov	r1, r3
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ec:	431a      	orrs	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	791b      	ldrb	r3, [r3, #4]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d003      	beq.n	8000302 <GPIO_Init+0x76>
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	791b      	ldrb	r3, [r3, #4]
 80002fe:	2b02      	cmp	r3, #2
 8000300:	d12e      	bne.n	8000360 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	689a      	ldr	r2, [r3, #8]
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	2103      	movs	r1, #3
 800030c:	fa01 f303 	lsl.w	r3, r1, r3
 8000310:	43db      	mvns	r3, r3
 8000312:	401a      	ands	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	689a      	ldr	r2, [r3, #8]
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	4619      	mov	r1, r3
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
 800032a:	431a      	orrs	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	685a      	ldr	r2, [r3, #4]
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	b29b      	uxth	r3, r3
 8000338:	4619      	mov	r1, r3
 800033a:	2301      	movs	r3, #1
 800033c:	408b      	lsls	r3, r1
 800033e:	43db      	mvns	r3, r3
 8000340:	401a      	ands	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	7992      	ldrb	r2, [r2, #6]
 800034e:	4611      	mov	r1, r2
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	b292      	uxth	r2, r2
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	b292      	uxth	r2, r2
 800035a:	431a      	orrs	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	68da      	ldr	r2, [r3, #12]
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	b29b      	uxth	r3, r3
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	2103      	movs	r1, #3
 800036c:	fa01 f303 	lsl.w	r3, r1, r3
 8000370:	43db      	mvns	r3, r3
 8000372:	401a      	ands	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	68da      	ldr	r2, [r3, #12]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	79db      	ldrb	r3, [r3, #7]
 8000380:	4619      	mov	r1, r3
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	fa01 f303 	lsl.w	r3, r1, r3
 800038a:	431a      	orrs	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	3301      	adds	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	2b0f      	cmp	r3, #15
 800039a:	d985      	bls.n	80002a8 <GPIO_Init+0x1c>
    }
  }
}
 800039c:	bf00      	nop
 800039e:	371c      	adds	r7, #28
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr

080003a6 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b085      	sub	sp, #20
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
 80003ae:	460b      	mov	r3, r1
 80003b0:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003b2:	2300      	movs	r3, #0
 80003b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	691a      	ldr	r2, [r3, #16]
 80003ba:	887b      	ldrh	r3, [r7, #2]
 80003bc:	4013      	ands	r3, r2
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d002      	beq.n	80003c8 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003c2:	2301      	movs	r3, #1
 80003c4:	73fb      	strb	r3, [r7, #15]
 80003c6:	e001      	b.n	80003cc <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003c8:	2300      	movs	r3, #0
 80003ca:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3714      	adds	r7, #20
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	460b      	mov	r3, r1
 80003e2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003e4:	2300      	movs	r3, #0
 80003e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	695a      	ldr	r2, [r3, #20]
 80003ec:	887b      	ldrh	r3, [r7, #2]
 80003ee:	4013      	ands	r3, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d002      	beq.n	80003fa <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003f4:	2301      	movs	r3, #1
 80003f6:	73fb      	strb	r3, [r7, #15]
 80003f8:	e001      	b.n	80003fe <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003fa:	2300      	movs	r3, #0
 80003fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000400:	4618      	mov	r0, r3
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr

0800040a <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800040a:	b480      	push	{r7}
 800040c:	b083      	sub	sp, #12
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
 8000412:	460b      	mov	r3, r1
 8000414:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	887a      	ldrh	r2, [r7, #2]
 800041a:	831a      	strh	r2, [r3, #24]
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr

08000426 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
 800042e:	460b      	mov	r3, r1
 8000430:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	887a      	ldrh	r2, [r7, #2]
 8000436:	835a      	strh	r2, [r3, #26]
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
	...

08000444 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	460b      	mov	r3, r1
 800044e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000450:	78fb      	ldrb	r3, [r7, #3]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d006      	beq.n	8000464 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000456:	4909      	ldr	r1, [pc, #36]	; (800047c <RCC_AHB1PeriphClockCmd+0x38>)
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <RCC_AHB1PeriphClockCmd+0x38>)
 800045a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4313      	orrs	r3, r2
 8000460:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000462:	e006      	b.n	8000472 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000464:	4905      	ldr	r1, [pc, #20]	; (800047c <RCC_AHB1PeriphClockCmd+0x38>)
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <RCC_AHB1PeriphClockCmd+0x38>)
 8000468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	43db      	mvns	r3, r3
 800046e:	4013      	ands	r3, r2
 8000470:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	40023800 	.word	0x40023800

08000480 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	460b      	mov	r3, r1
 800048a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800048c:	78fb      	ldrb	r3, [r7, #3]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d006      	beq.n	80004a0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000492:	4909      	ldr	r1, [pc, #36]	; (80004b8 <RCC_APB1PeriphClockCmd+0x38>)
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <RCC_APB1PeriphClockCmd+0x38>)
 8000496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4313      	orrs	r3, r2
 800049c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800049e:	e006      	b.n	80004ae <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80004a0:	4905      	ldr	r1, [pc, #20]	; (80004b8 <RCC_APB1PeriphClockCmd+0x38>)
 80004a2:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <RCC_APB1PeriphClockCmd+0x38>)
 80004a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	43db      	mvns	r3, r3
 80004aa:	4013      	ands	r3, r2
 80004ac:	640b      	str	r3, [r1, #64]	; 0x40
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40023800 	.word	0x40023800

080004bc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a28      	ldr	r2, [pc, #160]	; (8000574 <TIM_TimeBaseInit+0xb8>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d013      	beq.n	8000500 <TIM_TimeBaseInit+0x44>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a27      	ldr	r2, [pc, #156]	; (8000578 <TIM_TimeBaseInit+0xbc>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d00f      	beq.n	8000500 <TIM_TimeBaseInit+0x44>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004e6:	d00b      	beq.n	8000500 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a24      	ldr	r2, [pc, #144]	; (800057c <TIM_TimeBaseInit+0xc0>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d007      	beq.n	8000500 <TIM_TimeBaseInit+0x44>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <TIM_TimeBaseInit+0xc4>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d003      	beq.n	8000500 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a22      	ldr	r2, [pc, #136]	; (8000584 <TIM_TimeBaseInit+0xc8>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d108      	bne.n	8000512 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000500:	89fb      	ldrh	r3, [r7, #14]
 8000502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000506:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	885a      	ldrh	r2, [r3, #2]
 800050c:	89fb      	ldrh	r3, [r7, #14]
 800050e:	4313      	orrs	r3, r2
 8000510:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a1c      	ldr	r2, [pc, #112]	; (8000588 <TIM_TimeBaseInit+0xcc>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d00c      	beq.n	8000534 <TIM_TimeBaseInit+0x78>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a1b      	ldr	r2, [pc, #108]	; (800058c <TIM_TimeBaseInit+0xd0>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d008      	beq.n	8000534 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000522:	89fb      	ldrh	r3, [r7, #14]
 8000524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000528:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	891a      	ldrh	r2, [r3, #8]
 800052e:	89fb      	ldrh	r3, [r7, #14]
 8000530:	4313      	orrs	r3, r2
 8000532:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	89fa      	ldrh	r2, [r7, #14]
 8000538:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	685a      	ldr	r2, [r3, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	881a      	ldrh	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a09      	ldr	r2, [pc, #36]	; (8000574 <TIM_TimeBaseInit+0xb8>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d003      	beq.n	800055a <TIM_TimeBaseInit+0x9e>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a08      	ldr	r2, [pc, #32]	; (8000578 <TIM_TimeBaseInit+0xbc>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d104      	bne.n	8000564 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	7a9b      	ldrb	r3, [r3, #10]
 800055e:	b29a      	uxth	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2201      	movs	r2, #1
 8000568:	829a      	strh	r2, [r3, #20]
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	40010000 	.word	0x40010000
 8000578:	40010400 	.word	0x40010400
 800057c:	40000400 	.word	0x40000400
 8000580:	40000800 	.word	0x40000800
 8000584:	40000c00 	.word	0x40000c00
 8000588:	40001000 	.word	0x40001000
 800058c:	40001400 	.word	0x40001400

08000590 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d008      	beq.n	80005b4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80005b2:	e007      	b.n	80005c4 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	f023 0301 	bic.w	r3, r3, #1
 80005be:	b29a      	uxth	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	801a      	strh	r2, [r3, #0]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	807b      	strh	r3, [r7, #2]
 80005da:	4613      	mov	r3, r2
 80005dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005de:	787b      	ldrb	r3, [r7, #1]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d008      	beq.n	80005f6 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	899b      	ldrh	r3, [r3, #12]
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	887b      	ldrh	r3, [r7, #2]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80005f4:	e009      	b.n	800060a <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	899b      	ldrh	r3, [r3, #12]
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	43db      	mvns	r3, r3
 8000600:	b29b      	uxth	r3, r3
 8000602:	4013      	ands	r3, r2
 8000604:	b29a      	uxth	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	819a      	strh	r2, [r3, #12]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000624:	2300      	movs	r3, #0
 8000626:	81bb      	strh	r3, [r7, #12]
 8000628:	2300      	movs	r3, #0
 800062a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	8a1b      	ldrh	r3, [r3, #16]
 8000630:	b29a      	uxth	r2, r3
 8000632:	887b      	ldrh	r3, [r7, #2]
 8000634:	4013      	ands	r3, r2
 8000636:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	899b      	ldrh	r3, [r3, #12]
 800063c:	b29a      	uxth	r2, r3
 800063e:	887b      	ldrh	r3, [r7, #2]
 8000640:	4013      	ands	r3, r2
 8000642:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000644:	89bb      	ldrh	r3, [r7, #12]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d005      	beq.n	8000656 <TIM_GetITStatus+0x42>
 800064a:	897b      	ldrh	r3, [r7, #10]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000650:	2301      	movs	r3, #1
 8000652:	73fb      	strb	r3, [r7, #15]
 8000654:	e001      	b.n	800065a <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000656:	2300      	movs	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800065a:	7bfb      	ldrb	r3, [r7, #15]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	460b      	mov	r3, r1
 8000670:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000672:	887b      	ldrh	r3, [r7, #2]
 8000674:	43db      	mvns	r3, r3
 8000676:	b29a      	uxth	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	821a      	strh	r2, [r3, #16]
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
	...

08000688 <main>:
void ReversedDirection(void);
static int statement = 1;


int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	int x = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
	GPIOD_Config();
 8000692:	f000 f95f 	bl	8000954 <GPIOD_Config>
	GPIOA_Config();
 8000696:	f000 f97b 	bl	8000990 <GPIOA_Config>
	while(1){
		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == 1){
 800069a:	2101      	movs	r1, #1
 800069c:	4810      	ldr	r0, [pc, #64]	; (80006e0 <main+0x58>)
 800069e:	f7ff fe82 	bl	80003a6 <GPIO_ReadInputDataBit>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d10d      	bne.n	80006c4 <main+0x3c>
			if(x != 1){
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d005      	beq.n	80006ba <main+0x32>
				INTTIM_Config(400, 42000);
 80006ae:	f24a 4110 	movw	r1, #42000	; 0xa410
 80006b2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80006b6:	f000 f981 	bl	80009bc <INTTIM_Config>
			}
			StraightDirection();
 80006ba:	f000 f813 	bl	80006e4 <StraightDirection>
			x = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	e7ea      	b.n	800069a <main+0x12>
		}else{
			if(x != 2){
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d005      	beq.n	80006d6 <main+0x4e>
				INTTIM_Config(1000, 42000);
 80006ca:	f24a 4110 	movw	r1, #42000	; 0xa410
 80006ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d2:	f000 f973 	bl	80009bc <INTTIM_Config>
			}
			ReversedDirection();
 80006d6:	f000 f891 	bl	80007fc <ReversedDirection>
			x = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	607b      	str	r3, [r7, #4]
		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == 1){
 80006de:	e7dc      	b.n	800069a <main+0x12>
 80006e0:	40020000 	.word	0x40020000

080006e4 <StraightDirection>:
		}
	}
}

	void StraightDirection(void){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
		switch(statement){
 80006e8:	4b42      	ldr	r3, [pc, #264]	; (80007f4 <StraightDirection+0x110>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	d87d      	bhi.n	80007ee <StraightDirection+0x10a>
 80006f2:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <StraightDirection+0x14>)
 80006f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f8:	08000709 	.word	0x08000709
 80006fc:	0800073f 	.word	0x0800073f
 8000700:	08000775 	.word	0x08000775
 8000704:	080007ab 	.word	0x080007ab
			case 1:
				if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_12))
 8000708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070c:	483a      	ldr	r0, [pc, #232]	; (80007f8 <StraightDirection+0x114>)
 800070e:	f7ff fe63 	bl	80003d8 <GPIO_ReadOutputDataBit>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d004      	beq.n	8000722 <StraightDirection+0x3e>
					GPIO_ResetBits(GPIOD, GPIO_Pin_12);
 8000718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071c:	4836      	ldr	r0, [pc, #216]	; (80007f8 <StraightDirection+0x114>)
 800071e:	f7ff fe82 	bl	8000426 <GPIO_ResetBits>
				if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_14)) //if led lights, won't turn it on again
 8000722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000726:	4834      	ldr	r0, [pc, #208]	; (80007f8 <StraightDirection+0x114>)
 8000728:	f7ff fe56 	bl	80003d8 <GPIO_ReadOutputDataBit>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d156      	bne.n	80007e0 <StraightDirection+0xfc>
					GPIO_SetBits(GPIOD, GPIO_Pin_14);
 8000732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000736:	4830      	ldr	r0, [pc, #192]	; (80007f8 <StraightDirection+0x114>)
 8000738:	f7ff fe67 	bl	800040a <GPIO_SetBits>
			break;
 800073c:	e050      	b.n	80007e0 <StraightDirection+0xfc>
			case 2:
				if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_14))
 800073e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000742:	482d      	ldr	r0, [pc, #180]	; (80007f8 <StraightDirection+0x114>)
 8000744:	f7ff fe48 	bl	80003d8 <GPIO_ReadOutputDataBit>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d004      	beq.n	8000758 <StraightDirection+0x74>
					GPIO_ResetBits(GPIOD, GPIO_Pin_14);
 800074e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000752:	4829      	ldr	r0, [pc, #164]	; (80007f8 <StraightDirection+0x114>)
 8000754:	f7ff fe67 	bl	8000426 <GPIO_ResetBits>
				if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_13))
 8000758:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075c:	4826      	ldr	r0, [pc, #152]	; (80007f8 <StraightDirection+0x114>)
 800075e:	f7ff fe3b 	bl	80003d8 <GPIO_ReadOutputDataBit>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d13d      	bne.n	80007e4 <StraightDirection+0x100>
					GPIO_SetBits(GPIOD, GPIO_Pin_13);
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	4822      	ldr	r0, [pc, #136]	; (80007f8 <StraightDirection+0x114>)
 800076e:	f7ff fe4c 	bl	800040a <GPIO_SetBits>
			break;
 8000772:	e037      	b.n	80007e4 <StraightDirection+0x100>
			case 3:
				if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_13))
 8000774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000778:	481f      	ldr	r0, [pc, #124]	; (80007f8 <StraightDirection+0x114>)
 800077a:	f7ff fe2d 	bl	80003d8 <GPIO_ReadOutputDataBit>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d004      	beq.n	800078e <StraightDirection+0xaa>
					GPIO_ResetBits(GPIOD, GPIO_Pin_13);
 8000784:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000788:	481b      	ldr	r0, [pc, #108]	; (80007f8 <StraightDirection+0x114>)
 800078a:	f7ff fe4c 	bl	8000426 <GPIO_ResetBits>
				if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_15))
 800078e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000792:	4819      	ldr	r0, [pc, #100]	; (80007f8 <StraightDirection+0x114>)
 8000794:	f7ff fe20 	bl	80003d8 <GPIO_ReadOutputDataBit>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d124      	bne.n	80007e8 <StraightDirection+0x104>
					GPIO_SetBits(GPIOD, GPIO_Pin_15);
 800079e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a2:	4815      	ldr	r0, [pc, #84]	; (80007f8 <StraightDirection+0x114>)
 80007a4:	f7ff fe31 	bl	800040a <GPIO_SetBits>
			break;
 80007a8:	e01e      	b.n	80007e8 <StraightDirection+0x104>
			case 4:
				if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_15))
 80007aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <StraightDirection+0x114>)
 80007b0:	f7ff fe12 	bl	80003d8 <GPIO_ReadOutputDataBit>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d004      	beq.n	80007c4 <StraightDirection+0xe0>
					GPIO_ResetBits(GPIOD, GPIO_Pin_15);
 80007ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007be:	480e      	ldr	r0, [pc, #56]	; (80007f8 <StraightDirection+0x114>)
 80007c0:	f7ff fe31 	bl	8000426 <GPIO_ResetBits>
				if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_12))
 80007c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c8:	480b      	ldr	r0, [pc, #44]	; (80007f8 <StraightDirection+0x114>)
 80007ca:	f7ff fe05 	bl	80003d8 <GPIO_ReadOutputDataBit>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10b      	bne.n	80007ec <StraightDirection+0x108>
					GPIO_SetBits(GPIOD, GPIO_Pin_12);
 80007d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d8:	4807      	ldr	r0, [pc, #28]	; (80007f8 <StraightDirection+0x114>)
 80007da:	f7ff fe16 	bl	800040a <GPIO_SetBits>
			break;
 80007de:	e005      	b.n	80007ec <StraightDirection+0x108>
			break;
 80007e0:	bf00      	nop
 80007e2:	e004      	b.n	80007ee <StraightDirection+0x10a>
			break;
 80007e4:	bf00      	nop
 80007e6:	e002      	b.n	80007ee <StraightDirection+0x10a>
			break;
 80007e8:	bf00      	nop
 80007ea:	e000      	b.n	80007ee <StraightDirection+0x10a>
			break;
 80007ec:	bf00      	nop
		}
	}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000000 	.word	0x20000000
 80007f8:	40020c00 	.word	0x40020c00

080007fc <ReversedDirection>:

	void ReversedDirection(void){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
		switch(statement){
 8000800:	4b42      	ldr	r3, [pc, #264]	; (800090c <ReversedDirection+0x110>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3b01      	subs	r3, #1
 8000806:	2b03      	cmp	r3, #3
 8000808:	d87d      	bhi.n	8000906 <ReversedDirection+0x10a>
 800080a:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <ReversedDirection+0x14>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	08000821 	.word	0x08000821
 8000814:	08000857 	.word	0x08000857
 8000818:	0800088d 	.word	0x0800088d
 800081c:	080008c3 	.word	0x080008c3
			case 1:
				if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_14))
 8000820:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000824:	483a      	ldr	r0, [pc, #232]	; (8000910 <ReversedDirection+0x114>)
 8000826:	f7ff fdd7 	bl	80003d8 <GPIO_ReadOutputDataBit>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d004      	beq.n	800083a <ReversedDirection+0x3e>
					GPIO_ResetBits(GPIOD, GPIO_Pin_14);
 8000830:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000834:	4836      	ldr	r0, [pc, #216]	; (8000910 <ReversedDirection+0x114>)
 8000836:	f7ff fdf6 	bl	8000426 <GPIO_ResetBits>
				if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_12))
 800083a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083e:	4834      	ldr	r0, [pc, #208]	; (8000910 <ReversedDirection+0x114>)
 8000840:	f7ff fdca 	bl	80003d8 <GPIO_ReadOutputDataBit>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d156      	bne.n	80008f8 <ReversedDirection+0xfc>
					GPIO_SetBits(GPIOD, GPIO_Pin_12);
 800084a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800084e:	4830      	ldr	r0, [pc, #192]	; (8000910 <ReversedDirection+0x114>)
 8000850:	f7ff fddb 	bl	800040a <GPIO_SetBits>
			break;
 8000854:	e050      	b.n	80008f8 <ReversedDirection+0xfc>
			case 2:
				if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_12))
 8000856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085a:	482d      	ldr	r0, [pc, #180]	; (8000910 <ReversedDirection+0x114>)
 800085c:	f7ff fdbc 	bl	80003d8 <GPIO_ReadOutputDataBit>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d004      	beq.n	8000870 <ReversedDirection+0x74>
					GPIO_ResetBits(GPIOD, GPIO_Pin_12);
 8000866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086a:	4829      	ldr	r0, [pc, #164]	; (8000910 <ReversedDirection+0x114>)
 800086c:	f7ff fddb 	bl	8000426 <GPIO_ResetBits>
				if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_15))
 8000870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000874:	4826      	ldr	r0, [pc, #152]	; (8000910 <ReversedDirection+0x114>)
 8000876:	f7ff fdaf 	bl	80003d8 <GPIO_ReadOutputDataBit>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d13d      	bne.n	80008fc <ReversedDirection+0x100>
					GPIO_SetBits(GPIOD, GPIO_Pin_15);
 8000880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000884:	4822      	ldr	r0, [pc, #136]	; (8000910 <ReversedDirection+0x114>)
 8000886:	f7ff fdc0 	bl	800040a <GPIO_SetBits>
			break;
 800088a:	e037      	b.n	80008fc <ReversedDirection+0x100>
			case 3:
				if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_15))
 800088c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000890:	481f      	ldr	r0, [pc, #124]	; (8000910 <ReversedDirection+0x114>)
 8000892:	f7ff fda1 	bl	80003d8 <GPIO_ReadOutputDataBit>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d004      	beq.n	80008a6 <ReversedDirection+0xaa>
					GPIO_ResetBits(GPIOD, GPIO_Pin_15);
 800089c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a0:	481b      	ldr	r0, [pc, #108]	; (8000910 <ReversedDirection+0x114>)
 80008a2:	f7ff fdc0 	bl	8000426 <GPIO_ResetBits>
				if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_13))
 80008a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008aa:	4819      	ldr	r0, [pc, #100]	; (8000910 <ReversedDirection+0x114>)
 80008ac:	f7ff fd94 	bl	80003d8 <GPIO_ReadOutputDataBit>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d124      	bne.n	8000900 <ReversedDirection+0x104>
					GPIO_SetBits(GPIOD, GPIO_Pin_13);
 80008b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ba:	4815      	ldr	r0, [pc, #84]	; (8000910 <ReversedDirection+0x114>)
 80008bc:	f7ff fda5 	bl	800040a <GPIO_SetBits>
			break;
 80008c0:	e01e      	b.n	8000900 <ReversedDirection+0x104>
			case 4:
				if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_13))
 80008c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c6:	4812      	ldr	r0, [pc, #72]	; (8000910 <ReversedDirection+0x114>)
 80008c8:	f7ff fd86 	bl	80003d8 <GPIO_ReadOutputDataBit>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d004      	beq.n	80008dc <ReversedDirection+0xe0>
					GPIO_ResetBits(GPIOD, GPIO_Pin_13);
 80008d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d6:	480e      	ldr	r0, [pc, #56]	; (8000910 <ReversedDirection+0x114>)
 80008d8:	f7ff fda5 	bl	8000426 <GPIO_ResetBits>
				if(!GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_14))
 80008dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <ReversedDirection+0x114>)
 80008e2:	f7ff fd79 	bl	80003d8 <GPIO_ReadOutputDataBit>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10b      	bne.n	8000904 <ReversedDirection+0x108>
					GPIO_SetBits(GPIOD, GPIO_Pin_14);
 80008ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f0:	4807      	ldr	r0, [pc, #28]	; (8000910 <ReversedDirection+0x114>)
 80008f2:	f7ff fd8a 	bl	800040a <GPIO_SetBits>
			break;
 80008f6:	e005      	b.n	8000904 <ReversedDirection+0x108>
			break;
 80008f8:	bf00      	nop
 80008fa:	e004      	b.n	8000906 <ReversedDirection+0x10a>
			break;
 80008fc:	bf00      	nop
 80008fe:	e002      	b.n	8000906 <ReversedDirection+0x10a>
			break;
 8000900:	bf00      	nop
 8000902:	e000      	b.n	8000906 <ReversedDirection+0x10a>
			break;
 8000904:	bf00      	nop
		}
	}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000000 	.word	0x20000000
 8000910:	40020c00 	.word	0x40020c00

08000914 <TIM2_IRQHandler>:


	void TIM2_IRQHandler(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
		if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET){
 8000918:	2101      	movs	r1, #1
 800091a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800091e:	f7ff fe79 	bl	8000614 <TIM_GetITStatus>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d011      	beq.n	800094c <TIM2_IRQHandler+0x38>
			TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000928:	2101      	movs	r1, #1
 800092a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800092e:	f7ff fe9a 	bl	8000666 <TIM_ClearITPendingBit>
			if(statement != 4){
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <TIM2_IRQHandler+0x3c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d005      	beq.n	8000946 <TIM2_IRQHandler+0x32>
				statement++;
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <TIM2_IRQHandler+0x3c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	4a03      	ldr	r2, [pc, #12]	; (8000950 <TIM2_IRQHandler+0x3c>)
 8000942:	6013      	str	r3, [r2, #0]
			}else{
				statement = 1;
			}
		}
	}
 8000944:	e002      	b.n	800094c <TIM2_IRQHandler+0x38>
				statement = 1;
 8000946:	4b02      	ldr	r3, [pc, #8]	; (8000950 <TIM2_IRQHandler+0x3c>)
 8000948:	2201      	movs	r2, #1
 800094a:	601a      	str	r2, [r3, #0]
	}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000

08000954 <GPIOD_Config>:

	void GPIOD_Config(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef gpioConf;
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800095a:	2101      	movs	r1, #1
 800095c:	2008      	movs	r0, #8
 800095e:	f7ff fd71 	bl	8000444 <RCC_AHB1PeriphClockCmd>
		gpioConf.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8000962:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000966:	603b      	str	r3, [r7, #0]
		gpioConf.GPIO_Mode = GPIO_Mode_OUT;
 8000968:	2301      	movs	r3, #1
 800096a:	713b      	strb	r3, [r7, #4]
		gpioConf.GPIO_Speed = GPIO_Speed_100MHz;
 800096c:	2303      	movs	r3, #3
 800096e:	717b      	strb	r3, [r7, #5]
		gpioConf.GPIO_OType = GPIO_OType_PP;
 8000970:	2300      	movs	r3, #0
 8000972:	71bb      	strb	r3, [r7, #6]
		gpioConf.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	71fb      	strb	r3, [r7, #7]

		GPIO_Init(GPIOD, &gpioConf);
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <GPIOD_Config+0x38>)
 800097e:	f7ff fc85 	bl	800028c <GPIO_Init>
	}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020c00 	.word	0x40020c00

08000990 <GPIOA_Config>:

	void GPIOA_Config(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef gpioConf;
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000996:	2101      	movs	r1, #1
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff fd53 	bl	8000444 <RCC_AHB1PeriphClockCmd>
		gpioConf.GPIO_Pin = GPIO_Pin_0;
 800099e:	2301      	movs	r3, #1
 80009a0:	603b      	str	r3, [r7, #0]
		gpioConf.GPIO_Mode = GPIO_Mode_IN;
 80009a2:	2300      	movs	r3, #0
 80009a4:	713b      	strb	r3, [r7, #4]

		GPIO_Init(GPIOA, &gpioConf);
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	4803      	ldr	r0, [pc, #12]	; (80009b8 <GPIOA_Config+0x28>)
 80009ac:	f7ff fc6e 	bl	800028c <GPIO_Init>
	}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40020000 	.word	0x40020000

080009bc <INTTIM_Config>:

	void INTTIM_Config(int period, int prescaler) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
		NVIC_InitTypeDef nvic_struct;
		nvic_struct.NVIC_IRQChannel = TIM2_IRQn;
 80009c6:	231c      	movs	r3, #28
 80009c8:	753b      	strb	r3, [r7, #20]
		nvic_struct.NVIC_IRQChannelPreemptionPriority = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	757b      	strb	r3, [r7, #21]
		nvic_struct.NVIC_IRQChannelSubPriority = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	75bb      	strb	r3, [r7, #22]
		nvic_struct.NVIC_IRQChannelCmd = ENABLE;
 80009d2:	2301      	movs	r3, #1
 80009d4:	75fb      	strb	r3, [r7, #23]

		NVIC_Init(&nvic_struct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fbf4 	bl	80001c8 <NVIC_Init>

		TIM_TimeBaseInitTypeDef tim_struct;
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80009e0:	2101      	movs	r1, #1
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff fd4c 	bl	8000480 <RCC_APB1PeriphClockCmd>

		tim_struct.TIM_Prescaler = prescaler;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	813b      	strh	r3, [r7, #8]
		tim_struct.TIM_Period = period;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60fb      	str	r3, [r7, #12]

		tim_struct.TIM_ClockDivision = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	823b      	strh	r3, [r7, #16]
		tim_struct.TIM_CounterMode = TIM_CounterMode_Up;
 80009f6:	2300      	movs	r3, #0
 80009f8:	817b      	strh	r3, [r7, #10]
		TIM_TimeBaseInit(TIM2, &tim_struct);
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000a04:	f7ff fd5a 	bl	80004bc <TIM_TimeBaseInit>
		TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000a10:	f7ff fddd 	bl	80005ce <TIM_ITConfig>
		TIM_Cmd(TIM2, ENABLE);
 8000a14:	2101      	movs	r1, #1
 8000a16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000a1a:	f7ff fdb9 	bl	8000590 <TIM_Cmd>
	}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a2e:	e003      	b.n	8000a38 <LoopCopyDataInit>

08000a30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a36:	3104      	adds	r1, #4

08000a38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a40:	d3f6      	bcc.n	8000a30 <CopyDataInit>
  ldr  r2, =_sbss
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a44:	e002      	b.n	8000a4c <LoopFillZerobss>

08000a46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a48:	f842 3b04 	str.w	r3, [r2], #4

08000a4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a50:	d3f9      	bcc.n	8000a46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a52:	f000 f83d 	bl	8000ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f000 f8e3 	bl	8000c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fe15 	bl	8000688 <main>
  bx  lr    
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a64:	08000c88 	.word	0x08000c88
  ldr  r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a6c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000a70:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000a74:	20000020 	.word	0x20000020

08000a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC_IRQHandler>

08000a7a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr

08000ac2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
	...

08000ad0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ad4:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <SystemInit+0x50>)
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <SystemInit+0x50>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <SystemInit+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <SystemInit+0x50>)
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <SystemInit+0x50>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000af4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <SystemInit+0x50>)
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <SystemInit+0x54>)
 8000afa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000afc:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <SystemInit+0x50>)
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <SystemInit+0x50>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <SystemInit+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000b0e:	f000 f80d 	bl	8000b2c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <SystemInit+0x58>)
 8000b14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b18:	609a      	str	r2, [r3, #8]
#endif
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	24003010 	.word	0x24003010
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000b3a:	4a35      	ldr	r2, [pc, #212]	; (8000c10 <SetSysClock+0xe4>)
 8000b3c:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <SetSysClock+0xe4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b44:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000b46:	4b32      	ldr	r3, [pc, #200]	; (8000c10 <SetSysClock+0xe4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3301      	adds	r3, #1
 8000b54:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d103      	bne.n	8000b64 <SetSysClock+0x38>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b62:	d1f0      	bne.n	8000b46 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <SetSysClock+0xe4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000b70:	2301      	movs	r3, #1
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	e001      	b.n	8000b7a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d142      	bne.n	8000c06 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000b80:	4a23      	ldr	r2, [pc, #140]	; (8000c10 <SetSysClock+0xe4>)
 8000b82:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <SetSysClock+0xe4>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000b8c:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <SetSysClock+0xe8>)
 8000b8e:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <SetSysClock+0xe8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b96:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000b98:	4a1d      	ldr	r2, [pc, #116]	; (8000c10 <SetSysClock+0xe4>)
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <SetSysClock+0xe4>)
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <SetSysClock+0xe4>)
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <SetSysClock+0xe4>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000baa:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000bac:	4a18      	ldr	r2, [pc, #96]	; (8000c10 <SetSysClock+0xe4>)
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <SetSysClock+0xe4>)
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000bb6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <SetSysClock+0xe4>)
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <SetSysClock+0xec>)
 8000bbc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000bbe:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <SetSysClock+0xe4>)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <SetSysClock+0xe4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bc8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000bca:	bf00      	nop
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <SetSysClock+0xe4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0f9      	beq.n	8000bcc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <SetSysClock+0xf0>)
 8000bda:	f240 7205 	movw	r2, #1797	; 0x705
 8000bde:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000be0:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <SetSysClock+0xe4>)
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <SetSysClock+0xe4>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f023 0303 	bic.w	r3, r3, #3
 8000bea:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000bec:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <SetSysClock+0xe4>)
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <SetSysClock+0xe4>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	f043 0302 	orr.w	r3, r3, #2
 8000bf6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000bf8:	bf00      	nop
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SetSysClock+0xe4>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	2b08      	cmp	r3, #8
 8000c04:	d1f9      	bne.n	8000bfa <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40007000 	.word	0x40007000
 8000c18:	07405419 	.word	0x07405419
 8000c1c:	40023c00 	.word	0x40023c00

08000c20 <__libc_init_array>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	4e0d      	ldr	r6, [pc, #52]	; (8000c58 <__libc_init_array+0x38>)
 8000c24:	4c0d      	ldr	r4, [pc, #52]	; (8000c5c <__libc_init_array+0x3c>)
 8000c26:	1ba4      	subs	r4, r4, r6
 8000c28:	10a4      	asrs	r4, r4, #2
 8000c2a:	2500      	movs	r5, #0
 8000c2c:	42a5      	cmp	r5, r4
 8000c2e:	d109      	bne.n	8000c44 <__libc_init_array+0x24>
 8000c30:	4e0b      	ldr	r6, [pc, #44]	; (8000c60 <__libc_init_array+0x40>)
 8000c32:	4c0c      	ldr	r4, [pc, #48]	; (8000c64 <__libc_init_array+0x44>)
 8000c34:	f000 f818 	bl	8000c68 <_init>
 8000c38:	1ba4      	subs	r4, r4, r6
 8000c3a:	10a4      	asrs	r4, r4, #2
 8000c3c:	2500      	movs	r5, #0
 8000c3e:	42a5      	cmp	r5, r4
 8000c40:	d105      	bne.n	8000c4e <__libc_init_array+0x2e>
 8000c42:	bd70      	pop	{r4, r5, r6, pc}
 8000c44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c48:	4798      	blx	r3
 8000c4a:	3501      	adds	r5, #1
 8000c4c:	e7ee      	b.n	8000c2c <__libc_init_array+0xc>
 8000c4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c52:	4798      	blx	r3
 8000c54:	3501      	adds	r5, #1
 8000c56:	e7f2      	b.n	8000c3e <__libc_init_array+0x1e>
 8000c58:	08000c80 	.word	0x08000c80
 8000c5c:	08000c80 	.word	0x08000c80
 8000c60:	08000c80 	.word	0x08000c80
 8000c64:	08000c84 	.word	0x08000c84

08000c68 <_init>:
 8000c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6a:	bf00      	nop
 8000c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c6e:	bc08      	pop	{r3}
 8000c70:	469e      	mov	lr, r3
 8000c72:	4770      	bx	lr

08000c74 <_fini>:
 8000c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c76:	bf00      	nop
 8000c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c7a:	bc08      	pop	{r3}
 8000c7c:	469e      	mov	lr, r3
 8000c7e:	4770      	bx	lr
